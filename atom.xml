<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>禹哥小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-04T14:02:45.673Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>spartguo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器-nginx配置</title>
    <link href="http://yoursite.com/2019/12/03/%E6%9C%8D%E5%8A%A1%E5%99%A8-nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/12/03/服务器-nginx配置/</id>
    <published>2019-12-03T05:51:13.000Z</published>
    <updated>2019-12-04T14:02:45.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>原来的服务器上的博客静态资源是通过nginx进行访问的，由于图片我之前是放在七牛云上面，但是访问图片的测试域名随时一个月就到期了，自己暂时也没有备案好的域名，所以希望说能够有个长期的落脚点，想着把图片也一起放到服务器的某个地方，然后通过特定的url通过nginx进行访问，但是在搞的过程中连配置文件都找了有一会儿，都不知道怎么搞。在此简单整理一波</p><h1 id="nginx是啥"><a href="#nginx是啥" class="headerlink" title="nginx是啥"></a>nginx是啥</h1><p>百度百科如是说</p><blockquote><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好。</p></blockquote><p>提取关键点，就是个服务器，这玩意儿最大的特点就是有个代理机制。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://139.199.159.100/blog_pictures/nginx-%E9%85%8D%E7%BD%AE/nginx-%E9%85%8D%E7%BD%AE4.png" alt="正向代理" title="">                </div>                <div class="image-caption">正向代理</div>            </figure><p>如上图，这个就是常见的一个模式，科学上网就是这么个运作模式，你访问google，但是有个墙挡住了，这个时候你就可以通过一个国外的，不会被墙挡住的服务器去访问，这个国外的服务器就充当了个代理的角色。服务器不知道谁要来访问我，我只需要知道有人来，我提供服务就好了。</p><p><img src="http://139.199.159.100/blog_pictures/nginx-%E9%85%8D%E7%BD%AE/nginx-%E9%85%8D%E7%BD%AE3.png" alt="反向代理"></p><p>而反向代理就是反过来，客户访问你，你有很多个服务，可能我图片放了一个地方，视频放了一个地方，这个时候你只需要发请求到代理服务器哪里，然后代理服务器nginx会自动解析url看看要发到哪里去，客户端不需要知道你发到哪里。</p><h1 id="主要命令"><a href="#主要命令" class="headerlink" title="主要命令"></a>主要命令</h1><p>启动，左边那个其实就是sbin里面的，右边的是配置文件，我的配置文件在/etc/nginx里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="关于停止"><a href="#关于停止" class="headerlink" title="关于停止"></a>关于停止</h2><ol><li><p>正常停止或关闭Nginx</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s quit</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li><li><p>快速停止或关闭Nginx</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure></li><li><p>查看进程的方式</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>从容停止</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -QUIT 进程号</span><br></pre></td></tr></table></figure></li><li><p>快速停止</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -TERM 进程号</span><br></pre></td></tr></table></figure></li><li><p>强制停止</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -9 nginx</span><br></pre></td></tr></table></figure></li></ul><p>下面几个和最上面非查看进程的方式异曲同工</p><h1 id="安装-删除"><a href="#安装-删除" class="headerlink" title="安装/删除"></a>安装/删除</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装没啥问题，直接用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>在搞完某个配置的时候，想重启，结果有点问题，应该是配置上的问题，我个人比较懒，就想着直接删了重来，结果呵呵，遇到了写问题</p><h3 id="痛苦根源"><a href="#痛苦根源" class="headerlink" title="痛苦根源"></a>痛苦根源</h3><p>一开始想着彻底卸载，直接调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure><p>然后网上删各种文件夹。</p><p>然后再装回来，看起来非常方便，很舒胡。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install install nginx</span><br></pre></td></tr></table></figure><p>因为我要改里面的配置，所以打算搞个重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>结果来一句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job for nginx.service failed because the control process exited with error code. See “systemctl stat</span><br></pre></td></tr></table></figure><p>更惨的是我删了重来，这个错误依然在</p><p>服务也一直开不起来</p><p>通过查阅资料主要是如下两个问题</p><ol><li>配置文件有问题</li><li>已经启动nginx配置或者端口被占用</li></ol><p>关于这个问题这篇文章对我有点小启发<br><a href="https://blog.csdn.net/LJFPHP/article/details/79102840" target="_blank" rel="noopener">nginx启动报错</a></p><p>而且安装完了之后因为我删去的/usr/sbin/下的nginx文件，我输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p><img src="" alt=""></p><p>上面提示我没有部分包，我也有点奇怪为啥重新安装没有把包重新安装了呢？</p><p>因为有问题的时候瞎搞了很多步骤，时间比较紧，也就没有看到底出在哪，我的解决重点在怎么删干净，也没有截图，估计里面涉及到很多问题，导致现在部分东西没办法复现，所以后续再深入探讨。</p><p>对于上面的问题，我觉得这篇文章很有帮助</p><p><a href="https://segmentfault.com/a/1190000014027697?utm_source=tag-newest" target="_blank" rel="noopener">记一次重装nginx时遇到的问题</a></p><h3 id="彻底删除"><a href="#彻底删除" class="headerlink" title="彻底删除"></a>彻底删除</h3><p>经过一番查阅知道，原来彻底删除的正确姿势是这样的</p><ol><li><p>删除nginx，包含配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure></li><li><p>自动移除全部不使用的软件包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure></li><li><p>罗列出与nginx相关的软件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br></pre></td></tr></table></figure><p> 可能会有nginx-common这些东西还留着，出现几个删几个，都删了，片甲不留</p><p> 当然有个直接的方法，可以直接</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx*</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>查看nginx正在运行的进程，如果有就kill掉</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep nginx</span><br></pre></td></tr></table></figure></li><li><p>全局查找与nginx相关的文件，找到后就删掉</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  find  /  -name  nginx*</span><br></pre></td></tr></table></figure><p> 找到文件一个个删有点累，可以来个组合命令。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name nginx* -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ol><p>到了这一步差不多了。</p><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><p>这里只搞基本的东西</p><p>接下来看下配置总体情况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://139.199.159.100/blog_pictures/nginx-%E9%85%8D%E7%BD%AE/nginx-%E9%85%8D%E7%BD%AE1.png" alt="整体结构图" title="">                </div>                <div class="image-caption">整体结构图</div>            </figure><h2 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h2><p>该部分配置主要影响Nginx全局：</p><h3 id="必须配置"><a href="#必须配置" class="headerlink" title="必须配置"></a>必须配置</h3><ol><li><p>指定运行worker进程的用户和组；<br>user USERNAME [GROUPNAME]<br>比如：user www-data;</p></li><li><p>指定nginx守护进程的pid文件<br>pid /path/to/pid_file;　　</p></li><li><p>指定所有worker进程所能够打开的最大文件句柄数;<br>worker_rlimit_nofile #;</p></li></ol><h3 id="性能优化相关的配置"><a href="#性能优化相关的配置" class="headerlink" title="性能优化相关的配置"></a>性能优化相关的配置</h3><ol><li><p>worker进程的个数：通常应该略小于CPU物理核心数;<br>worker_processes #</p></li><li><p>优点：提升缓存的命中率<br>worker_cpu_affinity cpumask…;<br>例子：worker_cpu_affinity 00000001 00000010 00000100;</p></li><li><p>计时器解析度：降低此值，可减少gettimeofday()系统调用的次数<br>timer_resolution　　</p></li><li><p>指明worker进程的nice值<br>worker_priority number;</p></li></ol><h2 id="event块"><a href="#event块" class="headerlink" title="event块"></a>event块</h2><p>该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p>master调度用户请求至各worker进程时使用的负载均衡锁；on表示能让多个worker轮流的、序列化的去响应新请求;<br>accept_mutex {off|on};</p></li><li><p>accept_mutex用到的锁文件路径;<br>lock_file;　　</p></li><li><p>指明使用的事件模型：建议让Nginx自行选择;<br>use [epoll|rtsig|select|poll];　　</p></li><li><p>设定单个worker进程所能够处理的最大并发连接数量<br>worker_connections #;  </p></li></ol><h3 id="调试定位问题"><a href="#调试定位问题" class="headerlink" title="调试定位问题"></a>调试定位问题</h3><ol><li><p>是否以守护进程方式运行nginx, 调试时应该设置为<br>offdaemon {on|off};　　</p></li><li><p>是否以master/worker模型来运行nginx；调试时可以设置为<br>offmaster_process {on|off};　　</p></li><li><p>error_log 位置 级别；若要使用debug级别，需要在编译nginx时使用–with-debug选项;<br>error_log file | stderr | syslog:server=address[,parameter=value] | memory:size [debug | info | notice | warn | error | crit | alert | emerg];</p></li></ol><p>常用配置</p><ul><li>worker_processes</li><li>worker_connections</li><li>worker_cpu_affinity</li><li>worker_priority　　　　</li></ul><h2 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h2><p>http {}: 由ngx_http_core_module模块所引入；</p><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>在这里有一些基本设置，因为细节暂时没有用到，到时候再说，可以先放默认的设置上来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Basic Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        sendfile on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line">        tcp_nodelay on;</span><br><span class="line">        keepalive_timeout 65;</span><br><span class="line">        types_hash_max_size 2048;</span><br><span class="line">        <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">        <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">        include /etc/nginx/mime.types;</span><br><span class="line">        default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># SSL Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Logging Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        access_log /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">        error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Gzip Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_disable <span class="string">"msie6"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># gzip_vary on;</span></span><br><span class="line">        <span class="comment"># gzip_proxied any;</span></span><br><span class="line">        <span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">        <span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">        <span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line">        <span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Virtual Host Configs</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        include /etc/nginx/conf.d/*.conf;</span><br><span class="line">        include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有问题可以参考下面两篇</p><p><a href="https://www.jianshu.com/p/d8bd75c0fb1b" target="_blank" rel="noopener">Nginx基本功能及其原理</a><br><a href="https://www.cnblogs.com/ckh2014/p/10849969.html" target="_blank" rel="noopener">linux服务基础之nginx配置详解</a></p><h3 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h3><p>这里就是重点的配置的地方了，第一个要找到配置文件，因为一开始我是很懵的，大家都在<code>nginx.conf</code>里面，我在ubuntu里面安装的nginx的<code>server{}</code>块没有在<code>nginx.conf</code>的配置文件里面，反而在<code>/etc/nginx/sites-available</code>里面的<code>default</code>里面。</p><p>然后就是一些配置，以为杂七杂八的东西很多，且很多东西需要一个具体场景可能才会需要到，所以这里就简单整理一些基本的</p><h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h4><p>listen指令有三种配置方法：</p><p>1、listen address[:port] [ default_server ]  [ ssl ];</p><p>2、listen port [ default_server ]  [ ssl ];</p><p>3、listen unix:path [ default_server ]  [ ssl ];</p><p>使用示例：</p><p>listen *:80 | *:8000;   ###监听所有80和8000端口</p><p>listen 192.168.1.10；###监听具体IP的所有端口上的连接</p><p>listen 8000；###监听具体端口上的所有IP连接，等同于listen  *:8000;</p><h4 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h4><p>设置虚拟主机名称。可以设置多个name<br>语法：server_name  name…;<br>例如：</p><p>server_name  myserver.com <a href="http://www.myserver.com" target="_blank" rel="noopener">www.myserver.com</a>;</p><p>因为我是在我自己的服务器上定位静态资源，不是代理，所以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name localhost</span><br></pre></td></tr></table></figure><p>然后里面貌似还可以用正则。</p><h4 id="root"><a href="#root" class="headerlink" title="root"></a>root</h4><p>指定根目录路径。<br>语法：root  path;</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location  /picture/ &#123;</span><br><span class="line">    root  /myspace/blog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的意思是url是<code>/picture</code>开头的，直接到这里来，然后这个root指引客户到<code>/myspace/blog/picture</code>里面拿东西</p><p>这个东西也可以直接在server写。<br>我的部分静态资源就是这么请求的。</p><h4 id="error-page"><a href="#error-page" class="headerlink" title="error_page"></a>error_page</h4><p>设置网站的错误页面，语法为：<br>error_page  code … [=[response]]uri;</p><p>code：要处理的HTTP错误代码</p><p>response：将code指定的错误代码转换为新的错误代码</p><p>uri：错误页面的路径或者网站地址，这个uri是相对于root设置的根路径而言的。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page  404  /404.html;</span><br></pre></td></tr></table></figure><h4 id="allow"><a href="#allow" class="headerlink" title="allow"></a>allow</h4><p>基于IP的访问控制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow  address | CIDR | unix |all;</span><br></pre></td></tr></table></figure><p>设置允许访问的IP范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deny  address | CIDR | unix:| all;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /t/ &#123;</span><br><span class="line">          root /data/www/vhost2/;</span><br><span class="line">          allow 172.16.100.120;   </span><br><span class="line">          deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅允许172.16.100.120这个IP地址访问</p><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>入口可以解析的文件类型</p><p>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index  index.html index.php index.htm</span><br></pre></td></tr></table></figure><h4 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h4><p>这个是在location块里面的，这个的意思是一旦有url和这个location匹配了，就直接把请求转到这个url里面去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://127.0.0.1:80;</span><br></pre></td></tr></table></figure><h4 id="proxy-set-header"><a href="#proxy-set-header" class="headerlink" title="proxy_set_header"></a>proxy_set_header</h4><p>这个是把客户端需要转发到后端服务器的头部一起转发过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host <span class="variable">$host</span>; </span><br><span class="line">proxy_set_header X-Forwarder-For <span class="variable">$remote_addr</span>;</span><br></pre></td></tr></table></figure><h4 id="proxy-redirect"><a href="#proxy-redirect" class="headerlink" title="proxy_redirect"></a>proxy_redirect</h4><p>这个功能很强大，当上游服务器返回的响应是重定向或刷新请求（如HTTP响应码是301或者302）时，proxy_redirect可以重设HTTP头部的location或refresh字段。</p><p>这个http头部的字段我不是很了解，简单查了下资料发现这个主要就是拿来跳转的。</p><p>而如果不写这个的话我们登录某个url-A，A转发给B，B发了个重定向给我们，就会在location头里面把B给带上，这样不太好，本来我就没办法访问B的或者本来B就不想让用户直接知道的，这样把B暴露了。</p><p>具体的操作可以是类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_redirect B A</span><br></pre></td></tr></table></figure><p>这样我们就可以啦，当然这只是一种情况，其他情况也有，具体可以参考下  </p><p><a href="https://www.cnblogs.com/kevingrace/p/8073646.html" target="_blank" rel="noopener">Nginx反向代理中使用proxy_redirect重定向url</a></p><p>因为自己暂时也用不到那么多，所以暂时就整理自己需要的，后续有需要再继续更新。<br>需要查找可以看这个<br><a href="https://blog.51cto.com/blief/1739178" target="_blank" rel="noopener">Nginx基础入门之proxy反向代理常用配置项说明</a></p><p>如有问题，欢迎指正。</p><hr><p>本文参考了<br><a href="https://blog.csdn.net/qq_36125138/article/details/84144932" target="_blank" rel="noopener">Nginx可以做什么？看完这篇你就懂了</a><br><a href="https://blog.csdn.net/weixin_44486991/article/details/88246972" target="_blank" rel="noopener">Job for nginx.service failed because the control process exited with error code. See “systemctl stat</a><br><a href="https://blog.51cto.com/10950710/2309269?source=dra" target="_blank" rel="noopener">nginx启动失败问题集锦</a><br><a href="https://www.cnblogs.com/fu-yong/p/9629097.html" target="_blank" rel="noopener">linux彻底删除nginx</a><br><a href="https://www.cnblogs.com/sunxun/p/9339836.html" target="_blank" rel="noopener">Linux下nginx 的常用命令</a><br><a href="https://www.jianshu.com/p/d8bd75c0fb1b" target="_blank" rel="noopener">Nginx基本功能及其原理</a><br><a href="https://www.cnblogs.com/ckh2014/p/10849969.html" target="_blank" rel="noopener">linux服务基础之nginx配置详解</a><br><a href="https://blog.51cto.com/zengestudy/1769790" target="_blank" rel="noopener">Nginx关于server块和location块的配置</a><br><a href="https://blog.csdn.net/qq_33404395/article/details/80567233" target="_blank" rel="noopener">当“服务器上部署多个Web应用”，使用Nginx反向代理配置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;原来的服务器上的博客静态资源是通过nginx进行访问的，由于图片我之前是放在七牛云上面，但是访问图片的测试域名随时一个月就到期了，自己暂时也
      
    
    </summary>
    
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>数据库-jdbc总结</title>
    <link href="http://yoursite.com/2019/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93-jdbc%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/21/数据库-jdbc总结/</id>
    <published>2019-11-21T11:51:39.000Z</published>
    <updated>2019-11-26T15:06:26.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本片文章参考自<br><a href="https://blog.csdn.net/jungle_rao/article/details/81274720" target="_blank" rel="noopener">https://blog.csdn.net/jungle_rao/article/details/81274720</a><br><a href="https://www.cnblogs.com/javazs/p/7825316.html" target="_blank" rel="noopener">https://www.cnblogs.com/javazs/p/7825316.html</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>惯例，来段百度百科</p><blockquote><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p></blockquote><p>对于jdbc有如下图来解释比较好</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/database-jdbc/jdbc.png" alt="jdbc" title="">                </div>                <div class="image-caption">jdbc</div>            </figure><p>说白了jdbc其实是一个规范来的，规范了我java要操作数据库要怎么操作你都要给我个统一，对数据库的操作，你只需要关心如何操作JDBC API而不用考虑不同的数据库操作不同，或者部分字段类型不同。</p><p>而且人家做好了很多java的数据类型到数据库字段的类型的映射，比如String对应数据库的char和varchar。</p><p>举个栗子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>因为你是调用jdbc的java api的，本来name的类型是char，但是数据库的char和java的char不太一样，所以需要转，这个时候jdbc已经帮你转好了。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>因为jdbc只是个规范，所以我们在操作不同的数据库要下载不同的jar包，里面有满足jdbc规范的针对某个特定数据库的驱动类。（ps：有时候也叫jdbc驱动，之前一直搞不清这些概念，233333）</p><p>这个驱动类实质上是实现了<code>java.sql.Driver</code>接口的一个类<br>查看官网文档如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/database-jdbc/jdbc2.png" alt="Driver接口" title="">                </div>                <div class="image-caption">Driver接口</div>            </figure><p>担心凭借自己低分飘过的六级理解错，所以我谷歌翻译了一下  </p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>boolean</td><td>acceptsURL(String url)</td></tr><tr><td></td><td>检索驱动程序是否认为它可以打开与给定URL的连接</td></tr><tr><td>Connection</td><td>connect(String url, Properties info)</td></tr><tr><td></td><td>尝试建立到给定URL的数据库连接</td></tr><tr><td>int</td><td>getMajorVersion(</td></tr><tr><td></td><td>检索驱动程序的主版本号。</td></tr><tr><td>int</td><td>getMinorVersion()</td></tr><tr><td></td><td>获取驱动程序的次要版本号</td></tr><tr><td>Logger</td><td>getParentLogger()</td></tr><tr><td></td><td>返回此驱动程序使用的所有Logger的父Logger。</td></tr><tr><td>DriverPropertyInfo[]</td><td>getPropertyInfo(String url, Properties info)</td></tr><tr><td></td><td>获取有关此驱动程序可能的属性的信息。</td></tr><tr><td>boolean</td><td>jdbcCompliant()</td></tr><tr><td></td><td>报告此驱动程序是否为正版JDBC Compliant™驱动程序</td></tr></tbody></table><p>通过jdbc驱动和数据库操作的主要过程如下：</p><h2 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h2><p>首先要加载初始化驱动类，这个过程其实就是讲驱动类加载到我们的JVM里面。关于类加载过程可以到<a href="https://www.baidu.com/s?wd=类加载过程" target="_blank" rel="noopener">到这里</a>看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里以Mysql为例</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>为什么其他类我直接就可以搞，人家会自动触发加载，这个为啥要手动呢？因为这个加载过程中其实是为了运行里面的静态代码块来对驱动进行初始化的，至于为什么这样我也不深入了，只知道不这样会抛异常，后续有空再瞅一下。</p><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>我们在上面已经了解过有个接口叫<code>connect(String url, Properties info)</code>可以帮助我们连接到指定url的数据库。</p><h3 id="使用Driver直接建立连接"><a href="#使用Driver直接建立连接" class="headerlink" title="使用Driver直接建立连接"></a>使用Driver直接建立连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载oracle驱动类，并实例化 </span></span><br><span class="line"> Driver driver = (Driver) Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>).newInstance(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建真实的数据库连接： </span></span><br><span class="line">String  url = <span class="string">"jdbc:oracle:thin:@127.0.0.1:1521:xe"</span>;       Properties props = <span class="keyword">new</span> Properties(); </span><br><span class="line">props.put(<span class="string">"user"</span>, <span class="string">"louluan"</span>); </span><br><span class="line">props.put(<span class="string">"password"</span>, <span class="string">"123456"</span>); </span><br><span class="line">Connection connection = driver.connect(url, props);</span><br></pre></td></tr></table></figure><p>在1和2之间我们也可以利用上面的测试接口，看看我们的url是否符合这个数据库的协议。然后再进行连接。</p><p>在连接过程中也发现了一个问题，就是这个连接单个数据库的时候没问题，但是连接多个数据库的时候我们就得搞多个Driver了，很麻烦。  </p><h3 id="DriverManager建立连接"><a href="#DriverManager建立连接" class="headerlink" title="DriverManager建立连接"></a>DriverManager建立连接</h3><p>解决方式就是来个DriverManager，用来管理我们的Driver。这个东西挺厉害，所有的驱动类都被他管着，他也可以注册/注销Driver（这个细节可以看参考的第二篇博客），想怎么玩怎么玩，驱动类初期一加载初始化然后就会自动注册到DriverManager中让他管理。而且我们的某个数据库的Driver被注销了之后，重新通过DriverManger进行getDriver，就和没有进行初始化驱动类一个结果，抛异常。</p><p>这个DriverManager有个静态方法getDriver，可以通过传过来的URL，返回可以打开URL的Driver。(这个过程其实是DriverManager通过遍历每一个Driver的acceptsURL(url)判断这个url是符合哪一个的。</p><p>而为了更进一步的方便，有个getConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Driver driver  = DriverManager.getDriver(url); </span><br><span class="line">Connection connection = driver.connect(url, props);</span><br></pre></td></tr></table></figure><p>也等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>); </span><br><span class="line">Connection connection = DriverManager.getConnection(url, props);</span><br></pre></td></tr></table></figure><p>如果我们经常使用某个驱动，我们可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置值系统变量jdbc.drivers </span></span><br><span class="line">System.setProperty(<span class="string">"jdbc.drivers"</span>, <span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br></pre></td></tr></table></figure><p>这样，在DriverManager第一次使用的时候就会首先加载这个驱动类。<br>因为DriverManager会在第一次加载的时候执行静态代码块初始化这个管理类</p><p>具体DriverManager的API可以看<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">这里</a></p><p>通常我们我们也用这种方式<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/exam?characterEncoding=UTF-8"</span>, <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h2><h3 id="创建Statement"><a href="#创建Statement" class="headerlink" title="创建Statement"></a>创建Statement</h3><p>这东西是也是一个接口类来的，它里面有很多函数我们可以通过connection的<code>createStatement（）</code>函数来获得statement对象。</p><p>Statement对象创建之后，可以执行SQL语句，完成对数据库的增删改查。其中，增删改只需要改变SQL语句的内容就能完成，然而查询略显复杂。</p><p>大概是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Statement stat = conn.createStatement();</span><br><span class="line"><span class="comment">// 准备sql语句</span></span><br><span class="line"><span class="comment">// 注意： 字符串要用单引号'</span></span><br><span class="line">String sql = <span class="string">"insert into students values('小明'"</span>+<span class="string">","</span>+<span class="string">"'201616116')"</span>;</span><br><span class="line"><span class="comment">//在statement中使用字符串拼接的方式，这种方式存在诸多问题</span></span><br><span class="line">stat.execute(sql);</span><br></pre></td></tr></table></figure><p>在Statement中使用字符串拼接的方式，这样有什么坏处呢？</p><pre><code>1.SQL注入。举个栗子：一般我们执行这条语句，插入的名字和学号是变化的，我们传来的是“小明”还好，如果传了一个“小明........”后面接着其他的sql语句咋整，这个我们是没办法阻止的，人家传多少，我们执行多少。人家搞个删库的过来，哟吼，完蛋！2.复杂这么一搞，我每个sql都要这么玩，这么拼接，代码量也大，也不舒服。</code></pre><p>Statement在实际过程中使用的非常的少，所以一般我们都用这个PreparedStatement</p><h3 id="用PreparedStatement"><a href="#用PreparedStatement" class="headerlink" title="用PreparedStatement"></a>用PreparedStatement</h3><p>不多说直接上代码看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"insert into students  values(?,?)"</span>;</span><br><span class="line">PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, Id);</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure><p>诶，不一样了，对于同样的语句我们如果用preparedstatement，相对原有的statement好了很多。而且这里听说有个预编译机制，性能会快那么一两点。</p><p>对于<code>insert</code>/<code>delete</code>/<code>update</code>都可以用<code>executeUpdate()</code>函数，返回int，表示有多少行受到了影响，而查询<code>select</code>则可以用<code>executeQuery()</code></p><h2 id="处理和显示结果"><a href="#处理和显示结果" class="headerlink" title="处理和显示结果"></a>处理和显示结果</h2><p>接下来就是结果了，我们进行一波查询或者啥的总要返回结果给java这边吧，java这边有个ResultSet这个集合类可以让stat执行完sql语句后把结果返回给我们。</p><p>ResultSet这东西其实是个借口来着，我们一般常用的就只有里面几个方法，比如我们要取某个表的学号，就直接<code>getInt(/*字段列数或者是字段名*/)</code>学号在里面是第一列，就写个1也可以，学号在里面叫ID，就直接填”ID”也行。如果要传出来的是String的，就用<code>getString()</code>。</p><p>上代码看下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> Id = rs.getInt(<span class="string">"student_id"</span>);</span><br><span class="line">String Name = rs.getString(<span class="string">"student_name"</span>);</span><br><span class="line">    <span class="comment">//一般我们在后面会把这些搞成对象，方便集中处理。（转json）....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h2><p>我们创建的连接，用完了要关闭吧！<br>我们创建的statement，这个也要关闭。<br>我们创建的resultset，这个也要关闭。</p><p>这个时候我们就又要关闭他们了。当然我也尝试过不关闭，这可以跑，但是久而久之系统的可用资源慢慢下降整个后台性能就呵呵了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rs.close();</span><br><span class="line">pstmt.close();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="comment">//直接调用close即可进行关闭</span></span><br></pre></td></tr></table></figure><p>实际在进行close的时候也要考虑是不是空连接（查询一个不存在的表的时候），通常的做法是放进<code>finally{...}</code>里面，这样最后执行，然后close之前加个if判空即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123; <span class="comment">/* ignored */</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123; <span class="comment">/* ignored */</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123; <span class="comment">/* ignored */</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果这些不可能是空指针，可以直接try，catch，或者直接用人家封装的玩意儿</span></span><br><span class="line"> <span class="keyword">finally</span> &#123;</span><br><span class="line">    DbUtils.closeQuietly(rs);</span><br><span class="line">    DbUtils.closeQuietly(ps);</span><br><span class="line">    DbUtils.closeQuietly(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>差不多这样了，以上只是一些简单的执行过程，还有很多细节可以深入，数据库连接池，jdbctmplate等。在这里也mark一下，看下有空搞一搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本片文章参考自&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/jungle_rao/article/details/8
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-ORM简介</title>
    <link href="http://yoursite.com/2019/11/21/Mybatis-ORM%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/11/21/Mybatis-ORM简介/</id>
    <published>2019-11-21T08:29:44.000Z</published>
    <updated>2019-11-21T08:55:54.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>参考了<br><a href="http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html</a><br><a href="https://my.oschina.net/u/3568681/blog/1610459" target="_blank" rel="noopener">https://my.oschina.net/u/3568681/blog/1610459</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的元数据，将面向对象语言程序中的对象自动持久化到关系数据库中。本质上就是将数据从一种形式转换到另外一种形式。</p></blockquote><p>面向对象编程的话如java，编程时我们习惯于将东西都看为一个个对象（Object），而在关系型数据库中，每张表的字段之间的关系其实是一个关系来的，所以我们就将其称为关系（Relation），而两者的映射就是ORM。</p><h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><p>举个栗子：<br>一个学生，他有名字，学号，身高，体重。<br>如果将其存在数据库中的话就是一组关系,当然这组关系（表）可以存很多学生。<br>| 名字 | 学号 | 身高 | 体重 |<br>| :—:  | :—: | :—: | :—: |<br>| 小明 | 123 | 180 | 73 |</p><p>而如果在编程过程汇总我们倾向将学生直接包装为一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="comment">//.....setter and getter....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就很明显了，我们可以直接做一个映射如下：  </p><ul><li>数据库的表（table） –&gt; 类（class）</li><li>记录（record，行数据）–&gt; 对象（object）</li><li>字段（field）–&gt; 对象的属性（attribute）</li></ul><h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><p>这样有啥好处呢，不就是一一对应了一下？<br>对应了一下有个好处，在jdbc的时候，我们需要写sql语句，写的不亦乐乎，而有了这个我们就可以直接不用了解sql语句了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于查询我们应该只需要调用函数即可</span></span><br><span class="line">Student student = studentmapper.select(主键还是啥的);</span><br><span class="line">String name = student.getname();</span><br></pre></td></tr></table></figure><p>而对于ORM的实现框架，目前就有springDao，mybatis,hibernated等。当然具体的实现方式大同小异，主要是围绕这个来展开，通过这个开发人员不需要知道数据库的底层，不需要写sql，而且思维切换也比较简单。而且也将事务的处理逻辑和存储的操作分开，一定程度上也是一种解耦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;参考了&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.ht
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Mybatis是个啥</title>
    <link href="http://yoursite.com/2019/11/21/Mybatis-Mybatis%E6%98%AF%E4%B8%AA%E5%95%A5/"/>
    <id>http://yoursite.com/2019/11/21/Mybatis-Mybatis是个啥/</id>
    <published>2019-11-21T06:41:02.000Z</published>
    <updated>2019-11-26T12:52:28.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本片文章参考了<br><a href="https://www.cnblogs.com/zhuhuibiao/p/9825274.html" target="_blank" rel="noopener">Mybatis的工作流程</a><br><a href="https://blog.csdn.net/zw524362419/article/details/78936701" target="_blank" rel="noopener">01mybatis工作流程图</a><br><a href="https://blog.csdn.net/u010890358/article/details/80665753" target="_blank" rel="noopener">Mybatis工作流程及其原理与解析</a></p><p>对于Mybatis，在开发过程中也有使用，在使用过程中也发现了这玩意儿好用（配置方便），但是没有去深入思考这玩意儿除了我们用的过程中发现的优点，它还有什么优点，以及它的整个运行过程和原理，看了网上的文章还是让我有很多疑问。为此在这里进行进一步整理，也会随着自己学习过程不定期更新。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>首先我们来看下定义，以下是百度百科的结果</p><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录</p></blockquote><p>JDBC和ORM相关的我也做了简单的介绍。</p><ul><li><a href="/2019/11/21/Mybatis-ORM简介/">Mybatis-ORM简介</a>  </li><li><a href="/2019/11/21/数据库-jdbc总结/">数据库-jdbc总结</a></li></ul><p>这是参考文章整理的优点：</p><ul><li>半自动化的ORM实现(实体类和SQL语句之间建立映射关系)</li><li>SQL代码从程序代码中彻底分离，可重用</li><li>与JDBC相比，减少了50%以上的代码量</li><li>小巧灵活、简单易学，是最简单的持久化框架</li><li>提供XML标签，支持编写动态SQL</li><li>提供映射标签，支持对象与数据库的ORM字段映射</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h2><p>为了先有个大概的了解，先来看看总体工作流程，以下是参考文章的一个流程图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/mybatis-introduce/Mybatis.png" alt="流程" title="">                </div>                <div class="image-caption">流程</div>            </figure><h3 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a><strong>核心类</strong></h3><p>里面提到了几个类是Mybatis关键的核心类，在此稍稍介绍一下：</p><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory:"></a>SqlSessionFactory:</h3><p>每个基于 MyBatis 的应用都是以一个 <strong>SqlSessionFactory</strong> 的实例为中心的。SqlSessionFactory 的实例可以通过 <strong>SqlSessionFactoryBuilder</strong> 获得。而 SqlSessionFactoryBuilder 则可以从 <strong>XML 配置文件</strong>或通过<strong>Java的方式构建</strong>出 SqlSessionFactory 的实例。SqlSessionFactory 一旦被创建就应该在应用的<strong>运行期间一直存在</strong>，建议使用<strong>单例模式</strong>或者<strong>静态单例模式</strong>。<br>（<strong>tips</strong>：一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要使用多个数据库就配置多个环境分别对应一个SqlSessionFactory。）</p><h3 id="SqlSession："><a href="#SqlSession：" class="headerlink" title="SqlSession："></a>SqlSession：</h3><p>SqlSession是一个<strong>接口</strong>，它有2个实现类，分别是<strong>DefaultSqlSession(默认使用)</strong>以及<strong>SqlSessionManager</strong>。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库后都要调用close对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。</p><h3 id="Executor："><a href="#Executor：" class="headerlink" title="Executor："></a>Executor：</h3><p>Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExecutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statements），SimpleExecutor（普通的执行器）。以上三个就是主要的Executor。通过下图可以看到Mybatis在Executor的设计上面使用了装饰者模式，我们可以用CachingExecutor来装饰前面的三个执行器目的就是用来实现缓存。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启自动扫描，方便mapper类的注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dong.GW.list.Dao.Mapper"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源的配置，数据源就是你要在哪个数据库找东西 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ToDoList?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useJDBCCompliantTimezoneShift=true&amp;amp;useLegacyDatetimeCode=false&amp;amp;serverTimezone=UTC "</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sqlsessionfactory的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"dong.GW.list.Dao.Entity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 映射配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dong.GW.list.Dao.Mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本片文章参考了&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/zhuhuibiao/p/9825274.html&quot;
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Redis-JeisPool.returnResource()被弃用</title>
    <link href="http://yoursite.com/2019/11/17/Redis-JedisPool.returnResource()/"/>
    <id>http://yoursite.com/2019/11/17/Redis-JedisPool.returnResource()/</id>
    <published>2019-11-17T10:21:54.000Z</published>
    <updated>2019-11-17T13:00:46.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拷别人代码来跑的时候发现这个函数不能用，发现自己依赖导的是3.1，而人家的依赖导的版本是2.1，看了这篇文章才知道版本不支持了。</p></blockquote><p>原文链接<br><a href="https://my.oschina.net/xiehongfei/blog/646125" target="_blank" rel="noopener">https://my.oschina.net/xiehongfei/blog/646125</a></p><p>自Jedis3.0版本后jedisPool.returnResource()遭弃用,官方重写了Jedis的close方法用以代替；</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@deprecated</span> starting from Jedis 3.0 this method will not be exposed.</span></span><br><span class="line"><span class="comment">   * Resource cleanup should be done using <span class="doctag">@see</span> &#123;<span class="doctag">@link</span> redis.clients.jedis.Jedis#close()&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnResource</span><span class="params">(<span class="keyword">final</span> Jedis resource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        resource.resetState();</span><br><span class="line">        returnResourceObject(resource);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        returnBrokenResource(resource);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JedisException(<span class="string">"Could not return the resource to the pool"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>官方建议应用redis.clients.jedis#Jedis的close方法进行资源回收，官方代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (client.isBroken()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.returnBrokenResource(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.returnResource(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拷别人代码来跑的时候发现这个函数不能用，发现自己依赖导的是3.1，而人家的依赖导的版本是2.1，看了这篇文章才知道版本不支持了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文链接&lt;br&gt;&lt;a href=&quot;https://my.oschina.ne
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring-spring的bean</title>
    <link href="http://yoursite.com/2019/11/17/Spring-Bean/"/>
    <id>http://yoursite.com/2019/11/17/Spring-Bean/</id>
    <published>2019-11-17T10:21:54.000Z</published>
    <updated>2019-11-17T12:55:11.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文参考了<br><a href="https://www.awaimai.com/2596.html" target="_blank" rel="noopener">https://www.awaimai.com/2596.html</a><br><a href="https://www.zhihu.com/question/19773379" target="_blank" rel="noopener">java bean是个什么概念</a><br><a href="https://blog.csdn.net/weixin_43277643/article/details/84253237" target="_blank" rel="noopener">什么是bean</a></p><p>因为最近在做东西的时候做着做着多想了一步，一问自己bean这样配了之后有啥用，一时间还真就没法解释清楚，不禁陷入哲学般的沉思，不知道怎么解释，说到底还是基础知识不牢固，在这里再整理一遍。</p><h1 id="什么是Bean"><a href="#什么是Bean" class="headerlink" title="什么是Bean"></a>什么是Bean</h1><p>官方文档的解释：</p><blockquote><p>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container.</p></blockquote><p>人话翻译：</p><blockquote><p>在 Spring 中，构成应用程序主干并由Spring IoC容器管理的对象称为bean。bean是一个由Spring IoC容器实例化、组装和管理的对象。</p></blockquote><p>提取关键信息可以得出</p><ul><li><strong>bean是对象，一个或者多个不限定</strong></li><li><strong>bean由Spring中一个叫IoC的东西管理</strong></li><li><strong>我们的应用程序由一个个bean构成</strong></li></ul><h1 id="bean的规范"><a href="#bean的规范" class="headerlink" title="bean的规范"></a>bean的规范</h1><blockquote><ul><li>所有属性为private </li><li>提供默认构造方法</li><li>提供getter和setter</li><li>实现serializable接口</li></ul></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>引起我思考的一个问题就是</p><p>我们在xml中配置了这么个东西，到底是干什么的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"demo2.bean1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>一开始反应是将这个类的对象实例化过程交给Spring IOC来管理。</p><p>这话不假，但是我一般会怎么用呢？里面的配置干啥的呢？</p><p>对之前做的笔记进行整理发现，其实也很简单。</p><p>我们从头到尾整理一遍：</p><h2 id="为什么要有这个配置"><a href="#为什么要有这个配置" class="headerlink" title="为什么要有这个配置"></a>为什么要有这个配置</h2><p>首先我们有这么两个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;     <span class="comment">// CPU型号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ram;        <span class="comment">// RAM大小，单位GB</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, <span class="keyword">int</span> ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，Perso类需要用到Computer类，在这里我们发现，我们并没有直接new一个computer对象出来。在这里我们要先解释一下为什么要用IOC，而不是直接new。这玩意儿在大部分情况下都可以减少我们很多代码量。</p><h3 id="为什么要用IOC"><a href="#为什么要用IOC" class="headerlink" title="为什么要用IOC"></a>为什么要用IOC</h3><p>有一个宽泛的说法是解耦，这里放一张图，大概是这么个意思，具体的场景也没遇到过，牛逼喊出来就好了。</p><p>没有解耦</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/spring-bean/clipboard.png" alt="没有解耦" title="">                </div>                <div class="image-caption">没有解耦</div>            </figure><p>解耦</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/spring-bean/clipboard2.png" alt="解耦了" title="">                </div>                <div class="image-caption">解耦了</div>            </figure><p>A需要用到B，C,D,E等等类的时候，我们需要一个个去new吗，不，太累了，用IOC吧，人家帮我搞的好好的，我只需要负责用就好了，因为一个new如果是简单的new还好，如果new的时候还要初始化很多东西，然后还不止一个要new，这个时候IOC的好处就体现出来了。</p><h2 id="怎么用（配置）"><a href="#怎么用（配置）" class="headerlink" title="怎么用（配置）"></a>怎么用（配置）</h2><p>我们一般有三种方式来配置这个东西：</p><h3 id="1-XML方式显示配置"><a href="#1-XML方式显示配置" class="headerlink" title="1.XML方式显示配置"></a><strong>1.XML方式显示配置</strong></h3><p>我们在配置好这个东西之后</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"demo2.bean1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果需要的话还可以在里面加一些其他默认配置，比如名字默认是无名氏啥的--&gt;</span></span><br></pre></td></tr></table></figure><p>这样一配，人家spring就可以通过你这个找到你这个类然后帮你自动new了。</p><p>自动new的话怎么样拿到人家的new的对象呢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过工厂类拿到相应配置中的bean</span></span><br><span class="line">ApplicationContext apc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"configofdemo.xml"</span>);</span><br><span class="line"></span><br><span class="line">userservice us=(userservice)apc.getBean(<span class="string">"user"</span>); <span class="comment">//获得</span></span><br></pre></td></tr></table></figure><p>当然大部分情况下不会这样用，就和上面提到的，如果A需要newB,C,D,E,F。而且每一个都需要部分初始化配置，这个时候就可以这么来。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"B"</span> <span class="attr">class</span>=<span class="string">"xml.B"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--初始化对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">value</span>=<span class="string">"Hello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">value</span>=<span class="string">"Xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"C"</span> <span class="attr">class</span>=<span class="string">"xml.C"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">value</span>=<span class="string">"Hello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">value</span>=<span class="string">"Xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"D"</span> <span class="attr">class</span>=<span class="string">"xml.D"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">value</span>=<span class="string">"Hello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">value</span>=<span class="string">"Xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"xml.A"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--其实这个也是初始化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"依赖A"</span> <span class="attr">ref</span>=<span class="string">"A"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"依赖B"</span> <span class="attr">ref</span>=<span class="string">"B"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"依赖C"</span> <span class="attr">ref</span>=<span class="string">"C"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里面的property也有其他的变化的，也有什么构造器啊啥的，具体的不细说，之前笔记有记一点，先放上来。</p><blockquote><ul><li>ref=   用于对象属性的时候用  </li><li>property 用于有set和get方法的时候调用  </li><li>construction用于构造函数  </li><li>p名称空间属性注入<br>复杂的：  </li><li>数组、list—–property内用list  —简单类型用value，复杂用ref； </li><li>set——property内用set，  </li><li>map——property内用map——然后用entry 属性设置key 和value；   </li><li>properties——property里面用props———prop   key=？ 标签间写内容</li></ul></blockquote><p>类似的有一个通过代码装配bean的，这个我不太熟，先把标题放着，后续更新</p><h3 id="2-Java代码配置bean"><a href="#2-Java代码配置bean" class="headerlink" title="2.Java代码配置bean"></a><strong>2.Java代码配置bean</strong></h3><p>待更新…………</p><h3 id="3-自动化装配"><a href="#3-自动化装配" class="headerlink" title="3.自动化装配"></a><strong>3.自动化装配</strong></h3><p>这个和xml比的话，xml如果是你做了一道菜（创建一个类），然后写一个制作方法（xml配置bean），给springIOC容器让他帮你new的话。自动化装配就是自动记录你做菜的过程（创建类的时候就帮你搞定），其他啥都不用管。</p><p>写个比喻好累，不比喻了。其实这个就是注解。<br>在类前面打上一个<code>@component</code>注解你就相当于写了个<code>&lt;bean id=&quot;B&quot; class=&quot;xml.B&quot;&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"beanid"</span>) <span class="comment">//没有名字默认按类名作为id</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aimpl</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类自己bean有了，但是这个类依赖了其他类的时候我们也需要设置的，本来在xml里面我们配置一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"依赖C"</span> <span class="attr">ref</span>=<span class="string">"C"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>但是现在我们只需要一个<code>@Autowerid</code>就好了，上面代码就变成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"bean_id"</span>) <span class="comment">//没有名字默认按类名作为id</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aimpl</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowerid</span></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于类注解的话常用的有,大家都是bean，只不过名字不同罢了</p><ul><li>repository———Dao类注解</li><li>service——-service类注解</li><li>controller——–controller注解</li><li>component——-普通</li></ul><p>对于属性的注解</p><ul><li>普通属性———value</li><li>类———autowerid（自动默认按类型注入<br>autowerid下的qualifier后带名称精确定位（注解id——等于resource</li></ul><p>最后在xml里面开启注解扫描。这个扫描的话呢就是相当于自动扫描你包下的所有类，只要是在类名和属性名前面打了相关的注解的话就把它自动作为bean导入到这里面，而不用手动去写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后面的basepackage是我们要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.stalkers.impl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本文：</p><ul><li>关于注解方面还不够详细，具体后续会加一篇。</li><li>java代码配置bean未总结</li><li>部分地方未完善</li><li>有问题欢迎指正</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文参考了&lt;br&gt;&lt;a href=&quot;https://www.awaimai.com/2596.html&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Redis-发布者订阅者</title>
    <link href="http://yoursite.com/2019/11/16/Redis-%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85/"/>
    <id>http://yoursite.com/2019/11/16/Redis-发布者订阅者/</id>
    <published>2019-11-16T10:21:54.000Z</published>
    <updated>2019-11-17T06:29:59.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文参考了<br><a href="https://blog.csdn.net/clh604/article/details/19754939" target="_blank" rel="noopener">https://blog.csdn.net/clh604/article/details/19754939</a><br><a href="https://blog.csdn.net/gududedabai/article/details/80326129" target="_blank" rel="noopener">https://blog.csdn.net/gududedabai/article/details/80326129</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>为了解耦发布者(publisher)和订阅者(subscriber)之间的关系，Redis 使用了 channel (频道)作为两者的中介 —— 发布者将信息直接发布给 channel ，而 channel 负责将信息发送给适当的订阅者，发布者和订阅者之间没有相互关系，也不知道对方的存在：</p></blockquote><h2 id="实现介绍"><a href="#实现介绍" class="headerlink" title="实现介绍"></a>实现介绍</h2><p>订阅者订阅频道</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/redis-pubsub/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjEyMTA1NzAzMjky.jpg" alt="订阅" title="">                </div>                <div class="image-caption">订阅</div>            </figure><p>发布者在相应频道发信息就好，完全不需要管谁订阅了，自动会发送到每个订阅者手中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/redis-pubsub/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjEyMTA1NzE5NDc5.jpg" alt="发布" title="">                </div>                <div class="image-caption">发布</div>            </figure><h1 id="主要命令"><a href="#主要命令" class="headerlink" title="主要命令"></a>主要命令</h1><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>开启一个客户端先进行订阅。然后在另一个客户端在相应频道发布消息，两个客户端内容如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/subscribe1.png" alt="订阅" title="">                </div>                <div class="image-caption">订阅</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://q0p4k1fq1.bkt.clouddn.com/image/myblog/publish1.png" alt="发布消息" title="">                </div>                <div class="image-caption">发布消息</div>            </figure><h2 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h2><blockquote><p>发布消息</p></blockquote><h3 id="实现（源码）"><a href="#实现（源码）" class="headerlink" title="实现（源码）"></a>实现（源码）</h3><p>PUBLISH的命令主要有这两个步骤</p><ul><li><p>使用给定的频道作为键，在 redisServer.pubsub_channels 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p></li><li><p>遍历 redisServer.pubsub_patterns 链表，将链表中的模式和给定的频道进行匹配，如果匹配成功，那么将消息发布到相应模式的客户端当中。</p></li></ul><p>PUBLISH 命令的实际实现由 pubsubPublishMessage 函数完成，它的完整定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送消息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pubsubPublishMessage</span><span class="params">(robj *channel, robj *message)</span> </span>&#123; </span><br><span class="line">　　<span class="keyword">int</span> receivers = <span class="number">0</span>; </span><br><span class="line">　　<span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">de</span>;</span> </span><br><span class="line">　　listNode *ln; </span><br><span class="line">　　listIter li; </span><br><span class="line">　　<span class="comment">/* Send to clients listening for that channel */</span> </span><br><span class="line">　　<span class="comment">// 向频道的所有订阅者发送消息 </span></span><br><span class="line">　　de = dictFind(server.pubsub_channels,channel); </span><br><span class="line">　　<span class="keyword">if</span> (de) &#123; </span><br><span class="line">    　　<span class="built_in">list</span> *<span class="built_in">list</span> = dictGetVal(de); <span class="comment">// 取出所有订阅者 </span></span><br><span class="line">    　　listNode *ln; </span><br><span class="line">    　　listIter li; </span><br><span class="line">    　　<span class="comment">// 遍历所有订阅者， 向它们发送消息 </span></span><br><span class="line">    　　listRewind(<span class="built_in">list</span>,&amp;li); </span><br><span class="line">    　　<span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123; </span><br><span class="line">        　　redisClient *c = ln-&gt;value; </span><br><span class="line">        　　addReply(c,shared.mbulkhdr[<span class="number">3</span>]); </span><br><span class="line">        　　addReply(c,shared.messagebulk); </span><br><span class="line">        　　addReplyBulk(c,channel); <span class="comment">// 打印频道名 </span></span><br><span class="line">        　　addReplyBulk(c,message); <span class="comment">// 打印消息 </span></span><br><span class="line">        　　receivers++; <span class="comment">// 更新接收者数量 </span></span><br><span class="line">    　　&#125; </span><br><span class="line">　　&#125; </span><br><span class="line">　　<span class="comment">/* Send to clients listening to matching channels */</span> </span><br><span class="line">　　<span class="comment">// 向所有被匹配模式的订阅者发送消息 </span></span><br><span class="line">　　<span class="keyword">if</span> (listLength(server.pubsub_patterns)) &#123; </span><br><span class="line">    　　listRewind(server.pubsub_patterns,&amp;li); <span class="comment">// 取出所有模式 </span></span><br><span class="line">    　　channel = getDecodedObject(channel); </span><br><span class="line">    　　<span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123; </span><br><span class="line">        　　pubsubPattern *pat = ln-&gt;value; <span class="comment">// 取出模式 </span></span><br><span class="line">        　　<span class="comment">// 如果模式和 channel 匹配的话 </span></span><br><span class="line">        　　<span class="comment">// 向这个channel的订阅者发送消息 </span></span><br><span class="line">        　　<span class="keyword">if</span> (stringmatchlen((<span class="keyword">char</span>*)pat-&gt;pattern-&gt;ptr, </span><br><span class="line">        　　sdslen(pat-&gt;pattern-&gt;ptr), </span><br><span class="line">        　　(<span class="keyword">char</span>*)channel-&gt;ptr, </span><br><span class="line">        　　sdslen(channel-&gt;ptr),<span class="number">0</span>)) &#123; </span><br><span class="line">            　　addReply(pat-&gt;client,shared.mbulkhdr[<span class="number">4</span>]); </span><br><span class="line">            　　addReply(pat-&gt;client,shared.pmessagebulk); </span><br><span class="line">            　　addReplyBulk(pat-&gt;client,pat-&gt;pattern); <span class="comment">// 打印被匹配的模式 </span></span><br><span class="line">            　　addReplyBulk(pat-&gt;client,channel); <span class="comment">// 打印频道名 </span></span><br><span class="line">            　　addReplyBulk(pat-&gt;client,message); <span class="comment">// 打印消息 </span></span><br><span class="line">            　　receivers++; <span class="comment">// 更新接收者数量 </span></span><br><span class="line">　　        &#125; </span><br><span class="line">　　    &#125; </span><br><span class="line">　　    decrRefCount(channel); <span class="comment">// 释放用过的 channel </span></span><br><span class="line">　　&#125; </span><br><span class="line">　　<span class="keyword">return</span> receivers; <span class="comment">// 返回接收者数量 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SUBSCRIBE"><a href="#SUBSCRIBE" class="headerlink" title="SUBSCRIBE"></a>SUBSCRIBE</h2><blockquote><p>订阅频道</p></blockquote><h3 id="实现（源码）-1"><a href="#实现（源码）-1" class="headerlink" title="实现（源码）"></a>实现（源码）</h3><p><strong>数据结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span> </span><br><span class="line">　　<span class="comment">// 省略 ... </span></span><br><span class="line">　　dict *pubsub_channels; </span><br><span class="line"><span class="comment">// Map channels to list of subscribed clients </span></span><br><span class="line">　　<span class="comment">// 省略 ... </span></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure><p>pubsub_channels是个<strong>字典</strong>，字典的<strong>键</strong>就是一个个 <strong>channel</strong> ，而字典的<strong>值</strong>则是一个<strong>链表</strong>，链表中保存了所有订阅这个 channel 的客户端。(haspmap之类)，所以要订阅就现需要在里面加上自己</p><p>函数 pubsubSubscribeChannel 是 SUBSCRIBE 命令的底层实现，它完成了将客户端添加到订阅链表中的工作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 订阅指定频道 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅成功返回 1 ，如果已经订阅过，返回 0 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pubsubSubscribeChannel</span><span class="params">(redisClient *c, robj *channel)</span> </span>&#123; </span><br><span class="line">　　<span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">de</span>;</span> </span><br><span class="line">　　<span class="built_in">list</span> *clients = <span class="literal">NULL</span>; </span><br><span class="line">　　<span class="keyword">int</span> retval = <span class="number">0</span>; </span><br><span class="line">　　<span class="comment">/* Add the channel to the client -&gt; channels hash table */</span> </span><br><span class="line">　　<span class="comment">/*dictadd函数其实就是在字典里面加键值对，channel作为键，null为值</span></span><br><span class="line"><span class="comment">    这个函数会检查是否存在现有的channel，没有的话就创建一个，加到客户端的pubsub里面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//---------------关键--------------------</span></span><br><span class="line">　　<span class="keyword">if</span> (dictAdd(c-&gt;pubsub_channels,channel,<span class="literal">NULL</span>) == DICT_OK) &#123; </span><br><span class="line">　　    retval = <span class="number">1</span>; </span><br><span class="line">        <span class="comment">//函数的作用是增加对对象的引用，我不知道要干啥,不过我知道引用为0会被删掉</span></span><br><span class="line">　　    incrRefCount(channel); </span><br><span class="line">    　　<span class="comment">/* Add the client to the channel -&gt; list of clients hash table */</span> </span><br><span class="line">    　　<span class="comment">// 将 client 添加到订阅给定 channel 的链表中 </span></span><br><span class="line">    　　<span class="comment">// 这个链表是一个哈希表的值，哈希表的键是给定 channel </span></span><br><span class="line">    　　<span class="comment">// 这个哈希表保存在 server.pubsub_channels 里 </span></span><br><span class="line">        <span class="comment">//-----------------关键-------------------</span></span><br><span class="line">    　　de = dictFind(server.pubsub_channels,channel);</span><br><span class="line">    　　<span class="keyword">if</span> (de == <span class="literal">NULL</span>) &#123; </span><br><span class="line">        　　<span class="comment">// 如果 de 等于 NULL </span></span><br><span class="line">        　　<span class="comment">// 表示这个客户端是首个订阅这个 channel 的客户端 </span></span><br><span class="line">        　　<span class="comment">// 那么创建一个新的列表， 并将它加入到哈希表中 </span></span><br><span class="line">        　　clients = listCreate(); </span><br><span class="line">        　　dictAdd(server.pubsub_channels,channel,clients); </span><br><span class="line">        　　incrRefCount(channel); </span><br><span class="line">    　　&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        　　<span class="comment">// 如果 de 不为空，就取出这个 clients 链表 </span></span><br><span class="line">        　　clients = dictGetVal(de); </span><br><span class="line">　　    &#125; </span><br><span class="line">    　　<span class="comment">// 将客户端加入到链表中 </span></span><br><span class="line">    　　listAddNodeTail(clients,c); </span><br><span class="line">　　&#125; </span><br><span class="line">　　<span class="comment">/* Notify the client */</span> </span><br><span class="line">　　addReply(c,shared.mbulkhdr[<span class="number">3</span>]); </span><br><span class="line">　　addReply(c,shared.subscribebulk); </span><br><span class="line">　　<span class="comment">// 返回订阅的频道 </span></span><br><span class="line">　　addReplyBulk(c,channel); </span><br><span class="line">　　<span class="comment">// 返回客户端当前已订阅的频道和模式数量的总和 </span></span><br><span class="line">　　addReplyLongLong(c,dictSize(c-&gt;pubsub_channels)+listLength(c-&gt;pubsub_patterns)); </span><br><span class="line">　　<span class="keyword">return</span> retval; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>dictAdd(...)</code>源码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将给定键值对添加到字典中</span></span><br><span class="line"><span class="comment"> * 只有给定键 key 不存在于字典时，添加操作才会成功</span></span><br><span class="line"><span class="comment"> * 添加成功返回 DICT_OK , 失败返回 DICT_ERR</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dictAdd</span><span class="params">(dict *d, <span class="keyword">void</span> *key, <span class="keyword">void</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 新建节点,entry=null */</span></span><br><span class="line">    dictEntry *entry = dictAddRaw(d,key,<span class="literal">NULL</span>);  </span><br><span class="line">    <span class="comment">/* 如果entry不为null，返回1 */</span></span><br><span class="line">    <span class="keyword">if</span> (!entry) <span class="keyword">return</span> DICT_ERR;</span><br><span class="line">    <span class="comment">/* 给节点赋值 */</span></span><br><span class="line">    dictSetVal(d, entry, val);</span><br><span class="line">    <span class="comment">/*先添加键再添加值*/</span></span><br><span class="line">    <span class="comment">/* 操作成功，返回0 */</span></span><br><span class="line">    <span class="keyword">return</span> DICT_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dictEntry *<span class="title">dictAddRaw</span><span class="params">(dict *d, <span class="keyword">void</span> *key, dictEntry **existing)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> index;</span><br><span class="line">    dictEntry *entry;</span><br><span class="line">    dictht *ht; <span class="comment">/* 指向字典中的hash表 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 判断字典此时是否正在rehash */</span></span><br><span class="line">    <span class="keyword">if</span> (dictIsRehashing(d)) _dictRehashStep(d);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 如果新元素（key）已经存在，那么index=-1，否则index就是新元素的下标值 */</span></span><br><span class="line">    <span class="keyword">if</span> ((index = _dictKeyIndex(d, key, dictHashKey(d,key), existing)) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 给新的entry分配内存空间并且保存新的entry，</span></span><br><span class="line"><span class="comment">     * 在这里，会将新的元素放在hash表的表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* 如果字典这是正在rehash，那么会将entry添加到ht[1]中去；否则添加到ht[0] */</span></span><br><span class="line">    ht = dictIsRehashing(d) ? &amp;d-&gt;ht[<span class="number">1</span>] : &amp;d-&gt;ht[<span class="number">0</span>];</span><br><span class="line">    entry = zmalloc(<span class="keyword">sizeof</span>(*entry));</span><br><span class="line">    entry-&gt;next = ht-&gt;table[index];</span><br><span class="line">    ht-&gt;table[index] = entry;</span><br><span class="line">    ht-&gt;used++;<span class="comment">/* 更新hash表中used属性的值 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 设置entry的key */</span></span><br><span class="line">    dictSetKey(d, entry, key);</span><br><span class="line">    <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PSUBSCRIBE"><a href="#PSUBSCRIBE" class="headerlink" title="PSUBSCRIBE"></a>PSUBSCRIBE</h2><blockquote><p>订阅模式（多个频道）</p></blockquote><h3 id="实现（源码）-2"><a href="#实现（源码）-2" class="headerlink" title="实现（源码）"></a>实现（源码）</h3><p><strong>数据结构</strong></p><p>和 redisServer.pubsub_channels 属性类似， redisServer.pubsub_patterns 属性用于保存所有被订阅的模式，和 pubsub_channels 不同的是， pubsub_patterns 是一个链表(而不是字典)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span> </span><br><span class="line">　　<span class="comment">// ...... </span></span><br><span class="line">　　<span class="built_in">list</span> *pubsub_patterns; </span><br><span class="line">    <span class="comment">// A list of pubsub_patterns </span></span><br><span class="line">　　<span class="comment">// ...... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pubsubSubscribePattern 是 PSUBSCRIBE 的底层实现，它将客户端和所订阅的模式添加到redisServer.pubsub_patterns 当中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅指定模式 </span></span><br><span class="line"><span class="comment">// 订阅成功返回 1 ，如果已经订阅过，返回 0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pubsubSubscribePattern</span><span class="params">(redisClient *c, robj *pattern)</span> </span>&#123; </span><br><span class="line">　　<span class="keyword">int</span> retval = <span class="number">0</span>; </span><br><span class="line">　　<span class="comment">// 向 c-&gt;pubsub_patterns 中查找指定 pattern </span></span><br><span class="line">　　<span class="comment">// 如果返回值为 NULL ，说明这个 pattern 还没被这个客户端订阅过 </span></span><br><span class="line">　　<span class="keyword">if</span> (listSearchKey(c-&gt;pubsub_patterns,pattern) == <span class="literal">NULL</span>) &#123; </span><br><span class="line">    　　retval = <span class="number">1</span>; </span><br><span class="line">    　　<span class="comment">// 添加 pattern 到客户端 pubsub_patterns </span></span><br><span class="line">    　　listAddNodeTail(c-&gt;pubsub_patterns,pattern); </span><br><span class="line">    　　incrRefCount(pattern); </span><br><span class="line">    　　<span class="comment">// 将 pattern 添加到服务器 </span></span><br><span class="line">    　　pubsubPattern *pat; </span><br><span class="line">    　　pat = zmalloc(<span class="keyword">sizeof</span>(*pat)); </span><br><span class="line">    　　pat-&gt;pattern = getDecodedObject(pattern); </span><br><span class="line">    　　pat-&gt;client = c; </span><br><span class="line">    　　listAddNodeTail(server.pubsub_patterns,pat); </span><br><span class="line">　　&#125; </span><br><span class="line">　　<span class="comment">/* Notify the client */</span> </span><br><span class="line">　　addReply(c,shared.mbulkhdr[<span class="number">3</span>]); </span><br><span class="line">　　addReply(c,shared.psubscribebulk); </span><br><span class="line">　　<span class="comment">// 返回被订阅的模式 </span></span><br><span class="line">　　addReplyBulk(c,pattern); </span><br><span class="line">　　<span class="comment">// 返回客户端当前已订阅的频道和模式数量的总和 </span></span><br><span class="line">　　addReplyLongLong(c,dictSize(c-&gt;pubsub_channels)+listLength(c-&gt;pubsub_patterns)); </span><br><span class="line">　　<span class="keyword">return</span> retval; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的话如果每次添加都要去匹配每一个channel然后加client的话就太累了，这个东西也失去了意义，本来就是为了模式匹配的，这样一个个加，有点繁琐了。为了能让这玩意儿起作用，在publish中会在这里也遍历一次，在publish相应的执行函数中进行channel的对比，匹配上了就发。</p><h2 id="UNSUBSCRIBE"><a href="#UNSUBSCRIBE" class="headerlink" title="UNSUBSCRIBE"></a>UNSUBSCRIBE</h2><blockquote><p>不订阅</p></blockquote><p>这个就比较随意啦，就不细讲。</p><h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><p>个人一些理解上卡的关键点：  </p><p><strong>1.在没有一个channel的情况下是通过怎样的方式创建channel的呢？</strong>  </p><blockquote><p>这个要结合源代码来看，没有channel的时候，其实也就是这个channel被首次订阅的时候，这个时候会调用dictAdd，而且是加在服务端serer.pubsub上的，细节可以看上面的源码，。</p></blockquote><p><strong>2.如果自己没订阅的话别人订阅了，那在pubsub里面有其他人订阅了了岂不是自己就订阅不了了？</strong></p><blockquote><p>这个是我自己眼角膜不要了，我没看清楚的是在订阅相关的函数中第一个if条件中的pubsub是c-&gt;pubsub_channels，也就是说是客户端的一个字典，客户端的字典只是存了自己订阅的，里面的值啥都没有的。而下面的de的判断是server.pubsub，也就是远程的，那里面的list就会保存所有订阅了相应channel的客户端了。</p></blockquote><p><strong>3.为什么有ht[0]，ht[1]，没有2和3或4吗？</strong></p><blockquote><p>通过搜索资料发现，dicth哈希字典里面自带了两个哈希表，0和1，这个人家里面本来就有，没得杠。dictht0是直接存储哈希表的地方， dictht1在rehash中用到。<br>里面的一些详细问题暂时还没有参透，日后再说。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文参考了&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/clh604/article/details/1975493
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>IOTA-介绍</title>
    <link href="http://yoursite.com/2019/11/14/IOTA-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/11/14/IOTA-介绍/</id>
    <published>2019-11-14T10:21:54.000Z</published>
    <updated>2019-11-16T08:36:50.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文参考了<br><a href="https://www.jianshu.com/p/45c72f6cb417" target="_blank" rel="noopener">https://www.jianshu.com/p/45c72f6cb417</a><br><a href="https://www.iotachina.com/what-is-iota" target="_blank" rel="noopener">https://www.iotachina.com/what-is-iota</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>IOTA是为物联网（IoT）而设计的一个革命性的新型交易结算和数据转移层。它基于新型的分布式账本——Tangle（缠结）。Tangle能够克服现有区块链设计中的低效性，并为去中心化P2P系统共识的达成创造了一种新方法。通过IOTA进行转账不需要支付手续费，这是首例。这也就意味着，无论是多小额的支付都能通过IOTA完成。  </p></blockquote><h2 id="IOTA的Tangle和区块链有什么不同？"><a href="#IOTA的Tangle和区块链有什么不同？" class="headerlink" title="IOTA的Tangle和区块链有什么不同？"></a>IOTA的Tangle和区块链有什么不同？</h2><h3 id="最小单位"><a href="#最小单位" class="headerlink" title="最小单位"></a>最小单位</h3><ul><li>区块链的最小单位是<strong>区块</strong>（可能包含多个交易）</li><li>IOTA的最小单位是<strong>一次交易</strong></li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>他们是两个完全独立的架构，但是却建立在同一种规则之上。</p><h3 id="IOTA共识机制创新"><a href="#IOTA共识机制创新" class="headerlink" title="IOTA共识机制创新"></a>IOTA共识机制创新</h3><ul><li><p>区块链共识是通过一个非常严格的机制完成的，区块链中添加下一个区块需要多方进行竞争，并获取区块奖励或交易手续费。正因如此，共识和交易生成是分离开的，并且由网络的一小部分人来完成，通常会设置较高门槛（就像比特币一样），这样会导致进一步的中心化。</p></li><li><p>在IOTA系统中，网络中的每位参与者都能进行交易并且积极参与共识。更具体点说，你直接定位了两笔交易（主交易和分支交易），且间接在子tangle中定位其它交易。通过这种方式，验证就能同步进行，网络能够保持完全去中心化，不需要矿工传递信任，也不需要支付交易手续费。</p></li></ul><p><a href="https://www.jianshu.com/p/ced888ba7d3a" target="_blank" rel="noopener">https://www.jianshu.com/p/ced888ba7d3a</a><br>确认和共识讲解</p><h3 id="手续费"><a href="#手续费" class="headerlink" title="手续费"></a>手续费</h3><ul><li><p>基于比特币的交易需要支付矿工手续费，这里的矿工就是建立区块的节点。在未来小微支付广泛存在的物联网场景中，这种交易方式并不适用，因为这个手续费会大概率超过微小交易本身的价值，这种情况是非常不合理的。</p></li><li><p>同时，由于矿工的存在，使得比特币系统不可避免地拥有了<strong>节点二元性</strong>的特点</p></li></ul><blockquote><p>节点二元性：一类节点是参与交易的，而一类节点是参与确认交易的。这种二元性将会造成资源分配问题和公平性问题。</p></blockquote><p><strong>解决</strong>  ：</p><blockquote><p>在IOTA中，每一笔新交易发生之前，该笔交易的节点首先要选择之前两个旧交易进行验证。验证通过后，该交易和被验证的两笔交易绑定。也就是说，要在IOTA网络上发行交易，就要对之前的交易进行验证。<strong>参与交易的每个节点都要承担一些矿工的义务</strong>，对整个网络的交易真实性负责。</p></blockquote><p>这种记账的方式，不需要矿工，也不需要大量节点验证，这就节省了手续费和算力资源。有效地消除了手续费和网络二元性的问题，更加适用于大量节点之间小额交易的物联网场景。</p><h1 id="交易过程"><a href="#交易过程" class="headerlink" title="交易过程"></a>交易过程</h1><h2 id="选择旧交易"><a href="#选择旧交易" class="headerlink" title="选择旧交易"></a>选择旧交易</h2><p>一个节点在发行一个新的交易之前，首先要选择已经发生过的两个交易进行验证。关于选择哪两个交易，是IOTA技术的关键，最简单的策略是随机选择，并且要在还未被验证过的交易中进行选择。</p><p>（关键技术，还要深入）</p><h2 id="验证旧交易"><a href="#验证旧交易" class="headerlink" title="验证旧交易"></a>验证旧交易</h2><p>选择好旧交易后，节点会对它们进行验证。要检查交易的签名是否正确，生成该交易的工作量大小，以及是否和与之直接或间接相连的交易有冲突。如果有冲突，则重新选择旧交易；如果没有冲突，则验证通过。</p><h2 id="绑定旧交易"><a href="#绑定旧交易" class="headerlink" title="绑定旧交易"></a>绑定旧交易</h2><p>验证通过后，节点将新生成的交易与已被验证的交易进行绑定。绑定过程需要做一点PoW计算，类似于比特币中的矿工，需要找到一个随机数满足如下条件：该随机数和被验证交易中的某个数值连接成新的字符串，该字符串对应的哈希值应满足某个固定格式。</p><p>（待补充，然后呢，需要广播吗》）</p><h2 id="（待补充）每次交易干了啥"><a href="#（待补充）每次交易干了啥" class="headerlink" title="（待补充）每次交易干了啥"></a>（待补充）每次交易干了啥</h2><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote><p>IOTA的和其他代币最根本的区别是底层数据结构的不同。其他代币大多是用区块链存储交易数据，而IOTA则是采用了<strong>缠结Tangle</strong>作为其底层的数据结构。</p></blockquote><h2 id="Tangle"><a href="#Tangle" class="headerlink" title="Tangle"></a>Tangle</h2><blockquote><p>Tangle是一种存储交易数据的<strong>有向无环图（Directed Acyclic Graph, DAG）</strong>，其基本结构如图1所示。</p></blockquote><p>（待加图）</p><h1 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h1><h2 id="交易冲突"><a href="#交易冲突" class="headerlink" title="交易冲突"></a>交易冲突</h2><blockquote><p>IOTA通过交易权重解决这个问题。</p></blockquote><p>每个交易在生成时，都会附带两个权重值。</p><ul><li>自有权重，为3的指数，固定不变；</li><li>累计权重，是其后续绑定交易自有权重的累加，随着交易的增多而变大。</li></ul><p>（待补充）权重怎么算，权重怎么起作用</p><p><a href="https://www.cnblogs.com/s-lisheng/p/11287328.html" target="_blank" rel="noopener">pow共识机制</a></p><p>交易在被验证的时候，两个权重值是重要参考指标。累计权重越大的交易，意味着其可信度越高。在交易冲突发生的时候，会比较两个交易的累计权重，并舍弃那个累计权重较小的交易及其分支，后续如果遇到合适的时机会会再加上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文参考了&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/45c72f6cb417&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="IOTA" scheme="http://yoursite.com/categories/IOTA/"/>
    
    
      <category term="IOTA" scheme="http://yoursite.com/tags/IOTA/"/>
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="论文" scheme="http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis-常用命令</title>
    <link href="http://yoursite.com/2019/11/14/Redis-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/11/14/Redis-常用命令/</id>
    <published>2019-11-14T10:21:54.000Z</published>
    <updated>2019-11-16T08:24:53.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>参考  </p><p><a href="https://blog.csdn.net/weixx3/article/details/92188775" target="_blank" rel="noopener">https://blog.csdn.net/weixx3/article/details/92188775</a><br>暂未附上声明</p><p>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;参考  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixx3/article/details/9218
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>java-拆箱装箱</title>
    <link href="http://yoursite.com/2019/11/09/java-%E6%8B%86%E7%AE%B1%E8%A3%85%E7%AE%B1/"/>
    <id>http://yoursite.com/2019/11/09/java-拆箱装箱/</id>
    <published>2019-11-09T10:21:54.000Z</published>
    <updated>2019-11-17T12:55:42.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文转载于<br><a href="http://www.cnblogs.com/dolphin0520/p/3780005.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3780005.html</a><br>并根据自己的理解方式做了表达上的修改</p><hr><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Java SE5之前，如果要生成一个数值为10的Integer对象，必须这样进行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>而在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这个过程中会自动根据数值创建对应的 Integer对象，这就是装箱。  </p><p>而拆箱就是将包装器类型的转化为基本数据类型的一个过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;  <span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> n = i;   <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p><strong>Integer</strong>为例：  66<br>通过javap -c 对.java文件进行反编译得到.class文件<br>得到如下结果    </p><ul><li>在<strong>装箱</strong>的时候自动调用的是Integer的valueOf(int)方法</li><li>在<strong>拆箱</strong>的时候自动调用的是Integer的intValue方法</li></ul><p>其他的数据类型也都是按照相似的方式拆箱装箱的</p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文转载于&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3780005.html&quot; t
      
    
    </summary>
    
    
      <category term="JAVA基础" scheme="http://yoursite.com/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-最大回文子串</title>
    <link href="http://yoursite.com/2019/11/09/leetcode-%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/11/09/leetcode-最大回文子串/</id>
    <published>2019-11-09T08:07:50.000Z</published>
    <updated>2019-11-09T08:58:45.629Z</updated>
    
    <content type="html"><![CDATA[<p>暴力法不多做详解</p><h1 id="1-中心扩展法"><a href="#1-中心扩展法" class="headerlink" title="1.中心扩展法"></a>1.中心扩展法</h1><p>此方法<strong>主要思想</strong>:<br>通过查找以字符串中以某个字符为中心的回文子串是有多长，来得到每个回文子串的大小。对于这个子串，我们就从中心出发，向两边扩展，如果扩展后还是回文串，那么继续扩展，直到不是回文串，我们就可以将子串长度记录下来了。对于向两边扩展，我们可以通过一个下标来表示（也可以用指针），p1和p2。</p><p>现在有个问题，aabbaa和aabaa都是回文串，所以在打代码的时候就要稍稍做个处理。  </p><p>两种情况  </p><ul><li>回文子串是奇数个，那么中心点就是一个字符，所以初始状态，p1和p2是指向同一个字符的。</li><li>回文子串是偶数个，那么中心就是两个字符，所以初始状态，p1和p2是指向两个相同字符的。</li></ul><p>对于两种情况的处理打代码稍稍注意下就好了，问题不大。<br>（这个方法暂无代码……）</p><h1 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2.动态规划"></a>2.动态规划</h1><p>主要思想：<br>对于i到j是否是回文子串，我们只需要判断两个问题：</p><ul><li>i位置和j位置两个字符是否相同</li><li>如果相同了就判断i+1和j-1是否是个回文窜</li></ul><p>有了这两点就没啥问题了</p><p>公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i+1][j-1]</span><br></pre></td></tr></table></figure><p>这里的dp[i][j]存放的是boolean类型的，下面的dp存的是回文串长度</p><p>因为i一定会比j小，所以在二维数组上的操作要多多注意</p><p>一段比较原始的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> dp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line">        <span class="comment">//初始化dp数组，主要是a和aa这种先准备好</span></span><br><span class="line">        <span class="comment">//dp数组每个格子存放当前i到j的回文子串长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>; <span class="comment">//i到i（单个字符）就是个回文串</span></span><br><span class="line">            <span class="keyword">if</span> (i != len-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//aa也是个回文串</span></span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(i+<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][i+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这个循环和是纵列在外，横行在内</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; len; i ++)&#123;</span><br><span class="line">            <span class="comment">//这里是j到i</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == s.charAt(i))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[j+<span class="number">1</span>][i-<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                        dp[j][i] = dp[j+<span class="number">1</span>][i-<span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[j][i] = dp[j+<span class="number">1</span>][i-<span class="number">1</span>] +<span class="number">2</span> ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把最大子串给截出来</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxlen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i;j &lt; len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &gt;  maxlen)&#123;</span><br><span class="line">                    maxlen = dp[i][j];</span><br><span class="line">                    left = i;</span><br><span class="line">                    right = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(left,right+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="3-Manacher算法"><a href="#3-Manacher算法" class="headerlink" title="3.Manacher算法"></a>3.Manacher算法</h1><p>（待更）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;暴力法不多做详解&lt;/p&gt;
&lt;h1 id=&quot;1-中心扩展法&quot;&gt;&lt;a href=&quot;#1-中心扩展法&quot; class=&quot;headerlink&quot; title=&quot;1.中心扩展法&quot;&gt;&lt;/a&gt;1.中心扩展法&lt;/h1&gt;&lt;p&gt;此方法&lt;strong&gt;主要思想&lt;/strong&gt;:&lt;br&gt;通过查找以
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux下权限的修改设置</title>
    <link href="http://yoursite.com/2019/11/08/linux-permission/"/>
    <id>http://yoursite.com/2019/11/08/linux-permission/</id>
    <published>2019-11-08T08:46:26.000Z</published>
    <updated>2019-11-09T07:03:19.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a><strong>修改文件权限</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -R 777 files</span><br></pre></td></tr></table></figure><h3 id="1-先来讲讲数字"><a href="#1-先来讲讲数字" class="headerlink" title="1.先来讲讲数字"></a><strong>1.先来讲讲数字</strong></h3><p>777代表的是三个级别的身份<br>owner/group/others</p><p>对于每个级别都有三个不同的权限</p><ul><li>r 读权限read  4，100</li><li>w 写权限write 2，010</li><li>x 操作权限execute 1，  001</li></ul><p>如果rwx都可以，就对三个数进行相加，等于7。这个就相当于3bit的位来表示单个级别身份的权限，某个位上的1表示有这个位代表的权限，0表示没有</p><h3 id="2-接着讲讲-R"><a href="#2-接着讲讲-R" class="headerlink" title="2.接着讲讲 R"></a><strong>2.接着讲讲 R</strong></h3><p>对于R的话其实表示：<br><strong>对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</strong></p><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a><strong>3.其他</strong></h3><p>当然除了 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R XXX file.txt</span><br></pre></td></tr></table></figure><p>也有其他的方式，主要是依据owner/group/others三个用户来的。  </p><p>栗子：设置文件拥有者权限为可写，组合为可读，其他用户删去可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+w,g+r,o-x files.txt</span><br></pre></td></tr></table></figure><ul><li>own对应 u</li><li>group对应 g</li><li>other对应 o</li><li>所有对应 a</li></ul><hr><p>此处自己只是列举了自己常用的，部分深入的细节没有完全解释清楚，网上也有大片的参考。</p><p>详细的可以百度chmod</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改文件权限&quot;&gt;&lt;a href=&quot;#修改文件权限&quot; class=&quot;headerlink&quot; title=&quot;修改文件权限&quot;&gt;&lt;/a&gt;&lt;strong&gt;修改文件权限&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>初来乍到</title>
    <link href="http://yoursite.com/2019/11/08/myblog-creation/"/>
    <id>http://yoursite.com/2019/11/08/myblog-creation/</id>
    <published>2019-11-08T05:54:13.000Z</published>
    <updated>2019-11-17T05:35:04.491Z</updated>
    
    <content type="html"><![CDATA[<p>第一次建站，若有问题欢迎大家指正。</p><p>有问题欢迎大家发送邮件和我探讨交流<a href="mailto:172544714@qq.com" target="_blank" rel="noopener">172544714@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次建站，若有问题欢迎大家指正。&lt;/p&gt;
&lt;p&gt;有问题欢迎大家发送邮件和我探讨交流&lt;a href=&quot;mailto:172544714@qq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;172544714@qq.com&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Helloworld" scheme="http://yoursite.com/categories/Helloworld/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
</feed>
