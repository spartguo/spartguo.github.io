{"meta":{"title":"禹哥小站","subtitle":"","description":"","author":"spartguo","url":"http://yoursite.com","root":"/"},"pages":[{"title":"Categories","date":"2019-11-07T08:52:01.000Z","updated":"2019-11-07T08:56:04.345Z","comments":false,"path":"Categories/index.html","permalink":"http://yoursite.com/Categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-11-07T07:33:35.000Z","updated":"2019-11-07T07:59:32.665Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"leetcode-最大回文子串","slug":"leetcode-最大回文子串","date":"2019-11-09T08:07:50.000Z","updated":"2019-11-09T08:58:45.629Z","comments":true,"path":"2019/11/09/leetcode-最大回文子串/","link":"","permalink":"http://yoursite.com/2019/11/09/leetcode-%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/","excerpt":"","text":"暴力法不多做详解 1.中心扩展法此方法主要思想:通过查找以字符串中以某个字符为中心的回文子串是有多长，来得到每个回文子串的大小。对于这个子串，我们就从中心出发，向两边扩展，如果扩展后还是回文串，那么继续扩展，直到不是回文串，我们就可以将子串长度记录下来了。对于向两边扩展，我们可以通过一个下标来表示（也可以用指针），p1和p2。 现在有个问题，aabbaa和aabaa都是回文串，所以在打代码的时候就要稍稍做个处理。 两种情况 回文子串是奇数个，那么中心点就是一个字符，所以初始状态，p1和p2是指向同一个字符的。 回文子串是偶数个，那么中心就是两个字符，所以初始状态，p1和p2是指向两个相同字符的。 对于两种情况的处理打代码稍稍注意下就好了，问题不大。（这个方法暂无代码……） 2.动态规划主要思想：对于i到j是否是回文子串，我们只需要判断两个问题： i位置和j位置两个字符是否相同 如果相同了就判断i+1和j-1是否是个回文窜 有了这两点就没啥问题了 公式如下： 1dp[i][j] = dp[i+1][j-1] 这里的dp[i][j]存放的是boolean类型的，下面的dp存的是回文串长度 因为i一定会比j小，所以在二维数组上的操作要多多注意 一段比较原始的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public String longestPalindrome(String s) &#123; if (s.length() &lt;=1)&#123; return s; &#125; int len = s.length(); int dp[][] = new int[len][len]; //初始化dp数组，主要是a和aa这种先准备好 //dp数组每个格子存放当前i到j的回文子串长度 for (int i = 0;i &lt; len;i++)&#123; dp[i][i] = 1; //i到i（单个字符）就是个回文串 if (i != len-1)&#123; //aa也是个回文串 if (s.charAt(i) == s.charAt(i+1))&#123; dp[i][i+1] = 2; &#125; &#125; &#125; //这个循环和是纵列在外，横行在内 for (int i = 2; i &lt; len; i ++)&#123; //这里是j到i for (int j = 0;j &lt; i-1;j++)&#123; if (s.charAt(j) == s.charAt(i))&#123; if (dp[j+1][i-1] == 0)&#123; dp[j][i] = dp[j+1][i-1]; &#125;else &#123; dp[j][i] = dp[j+1][i-1] +2 ; &#125; &#125; &#125; &#125; //把最大子串给截出来 int left = 0; int right = 0; int maxlen = 0; for (int i =0;i&lt; len;i++)&#123; for (int j = i;j &lt; len;j++)&#123; if (dp[i][j] &gt; maxlen)&#123; maxlen = dp[i][j]; left = i; right = j; &#125; &#125; &#125; return s.substring(left,right+1); &#125; 3.Manacher算法（待更）","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"Linux下权限的修改设置","slug":"linux-permission","date":"2019-11-08T08:46:26.000Z","updated":"2019-11-09T07:03:19.907Z","comments":true,"path":"2019/11/08/linux-permission/","link":"","permalink":"http://yoursite.com/2019/11/08/linux-permission/","excerpt":"","text":"修改文件权限1$ chmod -R 777 files 1.先来讲讲数字777代表的是三个级别的身份owner/group/others 对于每个级别都有三个不同的权限 r 读权限read 4，100 w 写权限write 2，010 x 操作权限execute 1， 001 如果rwx都可以，就对三个数进行相加，等于7。这个就相当于3bit的位来表示单个级别身份的权限，某个位上的1表示有这个位代表的权限，0表示没有 2.接着讲讲 R对于R的话其实表示：对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更) 3.其他当然除了 1chmod -R XXX file.txt 也有其他的方式，主要是依据owner/group/others三个用户来的。 栗子：设置文件拥有者权限为可写，组合为可读，其他用户删去可执行权限 1chmod u+w,g+r,o-x files.txt own对应 u group对应 g other对应 o 所有对应 a 此处自己只是列举了自己常用的，部分深入的细节没有完全解释清楚，网上也有大片的参考。 详细的可以百度chmod","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"命令","slug":"命令","permalink":"http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"}]},{"title":"初来乍到","slug":"myblog-creation","date":"2019-11-08T05:54:13.000Z","updated":"2019-11-09T09:02:50.526Z","comments":false,"path":"2019/11/08/myblog-creation/","link":"","permalink":"http://yoursite.com/2019/11/08/myblog-creation/","excerpt":"","text":"第一次建站，若有问题欢迎大家指正。","categories":[{"name":"Helloworld","slug":"Helloworld","permalink":"http://yoursite.com/categories/Helloworld/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/tags/HEXO/"}]}]}